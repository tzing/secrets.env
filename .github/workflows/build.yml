name: Build

on:
  push:
    branches:
      - trunk
    tags:
      - v*
  pull_request:

env:
  # python version for the jobs that does not need to run on all versions
  MAIN_PYTHON_VERSION: "3.10"

  # workaround for issue: g-dbus-error-quark: The name org.freedesktop.secrets was not provided by any .service files (2)
  PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring

jobs:
  test:
    name: Unit test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --all-extras

      - name: Run pytest
        run: |
          poetry run pytest


  integration-test:
    name: Integretion test
    runs-on: ubuntu-latest

    env:
      VAULT_ADDR: http://localhost:8200
      VAULT_TOKEN: "sample-token"

    services:
      vault:
        image: public.ecr.aws/hashicorp/vault:latest
        env:
          VAULT_LOCAL_CONFIG: '{"disable_mlock": true, "backend": {"file": {"path": "/vault/file"}}}'
          VAULT_DEV_ROOT_TOKEN_ID: ${{ env.VAULT_TOKEN }}
        ports:
          - 8200:8200

    steps:
      - name: Get Vault CLI
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vault

      - name: Setup secrets
        run: |
          vault secrets enable -path kv1 -version=1 kv
          vault secrets enable -path kv2 -version=2 kv

          vault kv put kv1/test - << EoS
            {
              "foo": "hello"
            }
          EoS

          vault kv put kv2/test - << EoS
            {
              "foo": "hello, world",
              "test": {
                "name.with-dot": "sample-value"
              }
            }
          EoS

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ env.MAIN_PYTHON_VERSION }}-poetry-${{ hashFiles('poetry.lock') }}

      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install poetry
          poetry install --all-extras

      - name: Run pytest
        run: |
          poetry run pytest -m

  lint:
    name: Run linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ env.MAIN_PYTHON_VERSION }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip3 install poetry
          poetry install --all-extras --with lint

      - name: Coding style check
        run: |
          poetry run flake8

      - name: Type check
        run: |
          poetry run pyright

  publish:
    name: Release package to PyPI

    runs-on: ubuntu-latest

    needs:
      - test
      - lint

    if: startsWith(github.event.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.MAIN_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip3 install poetry

      - name: Check version
        run: |
          export PACKAGE_VERSION="$(poetry version --short)"
          export TAG_VERSION="${GITHUB_REF_NAME:1}"

          echo "package version: $PACKAGE_VERSION"
          echo "github ref: $TAG_VERSION"

          [[ "x$PACKAGE_VERSION" == "x$TAG_VERSION" ]]

      - name: Build
        run: |
          poetry build

      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  doc:
    name: Build documentation

    runs-on: ubuntu-latest

    needs:
      - test
      - lint

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ env.MAIN_PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies
        run: |
          pip3 install poetry
          poetry install --with doc

      - name: Check sphinx build error
        run: |
          poetry run sphinx-build -b html docs build > /dev/null 2> stderr.txt
          cat stderr.txt
          [[ ! -s stderr.txt ]]

      - name: Build doc
        run: poetry run sphinx-build -b html docs build

      - name: Deploy to Github pages
        uses: peaceiris/actions-gh-pages@v3
        if: startsWith(github.event.ref, 'refs/tags/v')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
